trigger:
 - main

pr: none

pool:
  name: TestAg

variables:
  tag: 'dev-$(Build.BuildId)'
  containerNameA: 'containerA'
  containerNameB: 'containerB'
  hostPortA: '1286'
  hostPortB: '1287'
  containerPort: '8080'
  healthCheckEndpoint: '/healthz'
  healthCheckInterval: '5' # Seconds between health checks
  healthCheckTimeout: '30' # Maximum seconds to wait for a healthy status
  projectFolder: 'ASPPipTest' # Define your project folder
  previousBuildId: $[counter(variables['Build.BuildId'], -1)] # Get the previous build ID

stages:
- stage: DeployDev
  jobs:
  - job: RollingUpdate
    steps:
    - checkout: self
      displayName: Checkout Code

    - script: |
        echo "Building Docker image from $(projectFolder)..."
        docker build -f $(projectFolder)/Dockerfile -t $(tag) $(projectFolder)
      displayName: Build Docker Image

    - script: |
        echo "Stopping Container A..."
        docker stop $(containerNameA) 2>/dev/null || true
      displayName: Stop Container A (if running)

    - script: |
        echo "Removing Container A..."
        docker rm $(containerNameA) 2>/dev/null || true
      displayName: Remove Container A (if exists)

    - script: |
        echo "Creating and Starting new Container A..."
        docker run -d --name $(containerNameA) -p $(hostPortA):$(containerPort) $(tag)
      displayName: Create and Start Container A

    - script: |
        echo "Waiting for new Container A to become healthy..."
        HEALTH_STATUS_A=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortA)$(healthCheckEndpoint))
        START_TIME=$(date +%s)
        while [ "$HEALTH_STATUS_A" -ne "200" ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ "$ELAPSED_TIME" -ge "$(healthCheckTimeout)" ]; then
            echo "Health check for new Container A timed out."
            exit 1
          fi
          echo "New Container A health status: $HEALTH_STATUS_A. Waiting $(healthCheckInterval) seconds..."
          sleep $(healthCheckInterval)
          HEALTH_STATUS_A=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortA)$(healthCheckEndpoint))
        done
        echo "New Container A is healthy."
      displayName: Health Check New Container A

    - script: |
        echo "Stopping Container B..."
        docker stop $(containerNameB) 2>/dev/null || true
      displayName: Stop Container B (if running)

    - script: |
        echo "Removing Container B..."
        docker rm $(containerNameB) 2>/dev/null || true
      displayName: Remove Container B (if exists)

    - script: |
        echo "Creating and Starting new Container B..."
        docker run -d --name $(containerNameB) -p $(hostPortB):$(containerPort) $(tag)
      displayName: Create and Start Container B

    - script: |
        echo "Waiting for new Container B to become healthy..."
        HEALTH_STATUS_B=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortB)$(healthCheckEndpoint))
        START_TIME=$(date +%s)
        while [ "$HEALTH_STATUS_B" -ne "200" ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ "$ELAPSED_TIME" -ge "$(healthCheckTimeout)" ]; then
            echo "Health check for new Container B timed out."
            exit 1
          fi
          echo "New Container B health status: $HEALTH_STATUS_B. Waiting $(healthCheckInterval) seconds..."
          sleep $(healthCheckInterval)
          HEALTH_STATUS_B=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortB)$(healthCheckEndpoint))
        done
        echo "New Container B is healthy."
      displayName: Health Check New Container B

    - script: |
        echo "Checking health of Container A..."
        HEALTH_STATUS_A_FINAL=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortA)$(healthCheckEndpoint))
        if [ "$HEALTH_STATUS_A_FINAL" -ne "200" ]; then
          echo "Final health check for Container A failed. Status code: $HEALTH_STATUS_A_FINAL"
          exit 1
        fi
        echo "Container A is healthy."

        echo "Checking health of Container B..."
        HEALTH_STATUS_B_FINAL=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:$(hostPortB)$(healthCheckEndpoint))
        if [ "$HEALTH_STATUS_B_FINAL" -ne "200" ]; then
          echo "Final health check for Container B failed. Status code: $HEALTH_STATUS_B_FINAL"
          exit 1
        fi
        echo "Container B is healthy."
      displayName: Final Health Check Both Containers

    - script: |
        echo "Attempting to prune unused docker images"
        docker image prune -a -f
      displayName: Prune Unused Docker Images