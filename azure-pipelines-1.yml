trigger: none
pr: none

resources:
  pipelines:
  - pipeline: build-pipeline
    source: Build-CI
    trigger:
      branches:
      - main

pool:
  name: TestAg

variables:
  tag: 'dev-$(Build.BuildId)'
  containerNameA: 'containerA'
  containerNameB: 'containerB'
  hostPortA: '1286'
  hostPortB: '1287'
  containerPort: '8080'
  healthCheckEndpoint: '/health' # Assuming you have a /health endpoint in your API
  healthCheckInterval: '5' # Seconds between health checks
  healthCheckTimeout: '30' # Maximum seconds to wait for a healthy status
  projectFolder: 'ASPPipTest' # Define your project folder

stages:
- stage: DeployDev
  jobs:
  - job: RollingUpdate
    steps:
    - checkout: self
      displayName: Checkout Code

    - script: |
        echo "Building Docker image from $(projectFolder)..."
        docker build -f $(projectFolder)/Dockerfile -t $(tag) $(projectFolder)
      displayName: Build Docker Image

    - script: |
        echo "Stopping and removing existing containers (if any)..."
        docker stop $(containerNameA) 2>/dev/null || true
        docker rm $(containerNameA) 2>/dev/null || true
        docker stop $(containerNameB) 2>/dev/null || true
        docker rm $(containerNameB) 2>/dev/null || true
      displayName: Stop and Remove Old Containers

    - script: |
        echo "Creating Container A..."
        docker create --name $(containerNameA) -p $(hostPortA):$(containerPort) $(tag)
        echo "Starting Container A..."
        docker start $(containerNameA)
      displayName: Create and Start Container A

    - script: |
        echo "Waiting for Container A to become healthy..."
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(containerNameA))
        START_TIME=$(date +%s)
        while [ "$HEALTH_STATUS" != "healthy" ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ "$ELAPSED_TIME" -ge "$(healthCheckTimeout)" ]; then
            echo "Health check for Container A timed out."
            exit 1
          fi
          echo "Container A health status: $HEALTH_STATUS. Waiting $(healthCheckInterval) seconds..."
          sleep $(healthCheckInterval)
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(containerNameA))
        done
        echo "Container A is healthy."
      displayName: Health Check Container A (Docker Inspect)

    - script: |
        echo "Creating Container B..."
        docker create --name $(containerNameB) -p $(hostPortB):$(containerPort) $(tag)
        echo "Starting Container B..."
        docker start $(containerNameB)
      displayName: Create and Start Container B

    - script: |
        echo "Waiting for Container B to become healthy..."
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(containerNameB))
        START_TIME=$(date +%s)
        while [ "$HEALTH_STATUS" != "healthy" ]; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ "$ELAPSED_TIME" -ge "$(healthCheckTimeout)" ]; then
            echo "Health check for Container B timed out."
            exit 1
          fi
          echo "Container B health status: $HEALTH_STATUS. Waiting $(healthCheckInterval) seconds..."
          sleep $(healthCheckInterval)
          HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(containerNameB))
        done
        echo "Container B is healthy."
      displayName: Health Check Container B (Docker Inspect)

    - script: |
        echo "Stopping and removing Container A..."
        docker stop $(containerNameA)
        docker rm $(containerNameA)
      displayName: Stop and Remove Container A

    - script: |
        echo "Ensuring Container B is healthy before completing..."
        HEALTH_STATUS=$(docker inspect --format='{{.State.Health.Status}}' $(containerNameB))
        if [ "$HEALTH_STATUS" != "healthy" ]; then
          echo "Container B is not healthy after update. Deployment failed."
          exit 1
        fi
        echo "Deployment successful with Container B running."
      displayName: Final Health Check B (Docker Inspect)